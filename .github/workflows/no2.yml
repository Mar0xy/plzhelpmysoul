name: Build FreeBSD Wine Package (i386)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Specify which Wine flavor to build (e.g., wine, wine-devel, wine-proton)'
        required: true
        default: 'wine'

jobs:
  build-freebsd-pkg-i386:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Build Wine Package on FreeBSD 14.3 VM (i386)
        # Launches a FreeBSD VM and runs the script inside it
        uses: vmactions/freebsd-vm@v1.2.4
        with:
          run: |
            set -eux  # Exit immediately on error

            CHROOT_NAME="i386_build_chroot"
            CHROOT_ROOT="/usr/chroot/$CHROOT_NAME"
            RELEASE_VERSION="14.3"

            # 1. Create and Configure the i386 Chroot Environment
            # --------------------------------------------------
            echo "Setting up i386 chroot at $CHROOT_ROOT..."
            mkdir -p "$CHROOT_ROOT"
      
            # Fetch the 32-bit base system and extract it
            fetch --no-verify-peer https://ftp.freebsd.org/pub/FreeBSD/releases/i386/i386/$RELEASE_VERSION-RELEASE/base.txz -o /tmp/base.txz
            tar -xpf /tmp/base.txz -C "$CHROOT_ROOT"
            chown -R root:wheel "$CHROOT_ROOT"
            
            # Copy essential host files and mount virtual filesystems
            cp /etc/resolv.conf "$CHROOT_ROOT"/etc/resolv.conf
            mount -t devfs devfs "$CHROOT_ROOT"/dev
            mkdir -p "$CHROOT_ROOT"/tmp
            chmod 1777 "$CHROOT_ROOT"/tmp

            # Configure pkg to use the 32-bit (i386) quarterly repository
            echo "Configuring pkg for i386 repository..."
            mkdir -p "$CHROOT_ROOT"/usr/local/etc/pkg/repos
            cat <<EOF | tee "$CHROOT_ROOT"/usr/local/etc/pkg/repos/FreeBSD.conf
            FreeBSD: {
              url: "pkg+http://pkg.FreeBSD.org/FreeBSD:14:i386/quarterly",
              mirror_type: "srv",
              enabled: yes,
              priority: 5,
              signature_type: "fingerprints",
              fingerprints: "/usr/share/keys/pkg",
            }
            EOF
            
            # 2. Prepare Ports and Build the Package inside the Chroot
            # ------------------------------------------------------
            echo "Preparing ports inside the i386 chroot..."
            
            # Bootstrap all required dependencies using chroot
            chroot "$CHROOT_ROOT" sh -c 'env ASSUME_ALWAYS_YES=YES \
                pkg install -y pkg git gmake pkgconf perl5 llvm19 flex bison desktop-file-utils gettext-tools gettext ninja gstreamer1-plugins sdl2 gcc13 binutils xorgproto libX11 libXcomposite libXcursor libXext libXi libXinerama libXrandr libXrender'
            
            # Clone ports tree
            chroot "$CHROOT_ROOT" sh -c 'git clone --depth 1 --branch 2025Q4 https://git.freebsd.org/ports.git /usr/ports'
            
            WINE_FLAVOR="${{ github.event.inputs.wine_version || 'wine-stable' }}"
            PORTS_PATH="/usr/ports/emulators/${WINE_FLAVOR}"
            PATCH_URL="https://dawn.wine/marie/freebsd-wine-patches/raw/branch/main/0002-kernel32-Avoid-RBP-based-frame-in-BaseThreadInitThunk-on-x64.patch"
            PATCH_FILENAME="extra-patch-kernel32-Avoid-RBP-based-frame-in-BaseThreadInitThunk-on-x64.patch"
            PATCH_DEST="${CHROOT_ROOT}${PORTS_PATH}/files/${PATCH_FILENAME}"
            
            echo "Building $WINE_FLAVOR in i386 chroot..."
            mkdir -p "$CHROOT_ROOT"/usr/ports/packages

            # Apply custom patch (note: this patch is technically for x64, but included here for completeness)
            echo "Fetching patch and modifying Makefile..."
            fetch -o "$PATCH_DEST" "$PATCH_URL"
            sed -i "" -e "/^EXTRA_PATCHES/s/\$/ \\ files\/${PATCH_FILENAME}/" "${CHROOT_ROOT}""${PORTS_PATH}"/Makefile

            # --- wine-proton Specific Updates ---
            if [ "$WINE_FLAVOR" = "wine-proton" ]; then
                echo "Applying specific configuration for wine-proton..."
                # Install cmake dependency inside the chroot
                chroot "$CHROOT_ROOT" sh -c 'env ASSUME_ALWAYS_YES=YES \
                pkg install -y cmake'
                
                # 1. Update Wine version and git commit in Makefile
                sed -i "" -e 's/9.0-3/10.0-1/g' "${CHROOT_ROOT}""${PORTS_PATH}"/Makefile
                sed -i "" -e 's/488fb296dda334a1e8555a9dd8f5cbe09be2afe5/8b5ff79bcef26007edd5f1f517ba823f56c01bf3/g' "${CHROOT_ROOT}""${PORTS_PATH}"/Makefile
                
                # 2. Update distinfo file with new SHA256 and SIZE
                NEW_DISTFILE="ValveSoftware-wine-10.0-1-8b5ff79bcef26007edd5f1f517ba823f56c01bf3_GH0.tar.gz"
                DISTINFO_FILE="${CHROOT_ROOT}${PORTS_PATH}/distinfo" 
                OLD_DISTFILE_PATTERN="wine-9.0-3-*"
                NEW_SHA256_LINE="SHA256 (${NEW_DISTFILE}) = 0ed544a6fefecebd5bf337d8df1343348880ff3b97cee910eb34cdb8977fa89f"
                NEW_SIZE_LINE="SIZE (${NEW_DISTFILE}) = 52573650"
                OLD_PATTERN_ESCAPED=$(echo "$OLD_DISTFILE_PATTERN" | sed 's/[\/\.]/\\&/g')
                
                # Delete old entries and append new ones
                sed -i "" -e "/SHA256 (${OLD_PATTERN_ESCAPED})/d" "$DISTINFO_FILE"
                sed -i "" -e "/SIZE (${OLD_PATTERN_ESCAPED})/d" "$DISTINFO_FILE"
                echo "$NEW_SHA256_LINE" | tee -a "$DISTINFO_FILE" > /dev/null
                echo "$NEW_SIZE_LINE" | tee -a "$DISTINFO_FILE" > /dev/null
  
                # 3. Update patches (remove old and modify existing)
                rm -f "${CHROOT_ROOT}""${PORTS_PATH}"/files/patch-dlls_ntdll_unix_loader.c "${CHROOT_ROOT}""${PORTS_PATH}"/files/patch-dlls_ntdll_unix_system.c "${CHROOT_ROOT}""${PORTS_PATH}"/files/patch-include_wine_asm.h 
                sed -i '' 's/@@ -4332,11 +4333,7 @@/@@ -3587,10 +3588,6 @@/' "${CHROOT_ROOT}""${PORTS_PATH}"/files/patch-dlls_winevulkan_vulkan.c
            fi
            
            # Execute the package build inside the 32-bit chroot
            BUILD_CMD="cd $PORTS_PATH && make clean && make BATCH=yes DISABLE_LICENSES=yes package"
            chroot "$CHROOT_ROOT" sh -c "$BUILD_CMD"
            
            # 3. Finalize and Clean Up
            # ------------------------
            # Find the built package file and copy it to the host workspace
            PKG_FILE=$(find "$CHROOT_ROOT"/usr/ports/packages/All/ -name "${WINE_FLAVOR}*.pkg" | head -n 1)
            
            if [ -z "$PKG_FILE" ]; then
                PKG_FILE=$(find "$CHROOT_ROOT"/usr/ports/packages/All/ -name "${WINE_FLAVOR}*.txz" | head -n 1)
            fi
            
            echo "Successfully built package: $PKG_FILE"
            cp "$PKG_FILE" "${GITHUB_WORKSPACE}/"
            
            # Clean up: Unmount devfs before the chroot directory is implicitly deleted
            umount "$CHROOT_ROOT"/dev
  
      - name: Upload Wine Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-wine-package
          # Search for any .pkg file copied back to the workspace root
          path: ${{ github.workspace }}/*.pkg
          retention-days: 7
