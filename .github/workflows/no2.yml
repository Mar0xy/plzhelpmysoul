name: Build FreeBSD Wine Package (i386)

on:
  workflow_dispatch:
    inputs:
      wine_version:
        description: 'Specify which Wine flavor to build (e.g., wine, wine-devel, wine-proton)'
        required: true
        default: 'wine'

jobs:
  build-freebsd-pkg-i386:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Build Wine Package on FreeBSD 14.3 VM (i386)
        uses: cross-platform-actions/action@v0.29.0
        with:
          operating_system: freebsd
          version: '14.3'
          # The script below runs entirely inside the temporary FreeBSD VM
          run: |
            set -eux  # Exit immediately on error

            JAIL_NAME="i386_build_jail"
            JAIL_ROOT="/usr/jail/$JAIL_NAME"
            RELEASE_VERSION="14.3" # Use a stable version of i386 base
            JAIL_CONF_FILE="/tmp/jail.conf"
            HOST_INTERFACE="vtnet0"
      
            # 1. Create and populate the i386 jail
            echo "Setting up i386 jail..."
            sudo mkdir -p "$JAIL_ROOT"
            sudo fetch --no-verify-peer https://ftp.freebsd.org/pub/FreeBSD/releases/i386/i386/$RELEASE_VERSION-RELEASE/base.txz -o /tmp/base.txz
            sudo tar -xpf /tmp/base.txz -C "$JAIL_ROOT"
            sudo chown -R root:wheel "$JAIL_ROOT"

            echo "Configuring host NAT and routing..."
            # Enable PF (Packet Filter)
            sudo sysctl net.inet.ip.forwarding=1
            sudo sysctl net.pfil.enable=1
            sudo sysctl net.pfil.auto_promisc=1
            sudo service pf start || true
            
            # Add a simple NAT rule to the host's pf.conf file
            cat <<EOF | sudo tee /etc/pf.conf
            # Define the external interface
            ext_if = "$HOST_INTERFACE"
            # Define the jail's dedicated interface and subnet
            jail_if = "lo1"
            jail_net = 10.10.0.0/24
            
            # Set up NAT from the jail subnet to the external interface
            nat on \$ext_if from \$jail_net to any -> (\$ext_if)
            pass out quick on \$ext_if inet all
            pass in on \$ext_if inet proto tcp to (self) port ssh
            # Allow traffic on the dedicated jail interface
            set skip on \$jail_if
            # Allow loopback traffic
            set skip on lo0
            EOF
            
            # Load the new pf rules
            sudo pfctl -f /etc/pf.conf
            sudo pfctl -e
            
            # Configure the dedicated jail interface (lo1) on the host
            sudo ifconfig lo1 create
            sudo ifconfig lo1 inet 10.10.0.1/24 up

            echo "Forcing public nameservers inside jail's resolv.conf..."
            cat <<EOF | sudo tee "$JAIL_ROOT"/etc/resolv.conf
            nameserver 8.8.8.8
            nameserver 1.1.1.1
            EOF

            # 2. Create a temporary jail.conf for robust configuration
            echo "Creating temporary jail.conf at $JAIL_CONF_FILE"
            cat <<EOF | sudo tee "$JAIL_CONF_FILE"
            $JAIL_NAME {
                host.hostname = "$JAIL_NAME";
                path = "$JAIL_ROOT";
                allow.mount.devfs = 1;
                allow.raw_sockets = 1;
                interface = "lo1";
                ip4.addr = 10.10.0.2/24;
                mount.devfs;
                exec.start = "/bin/sh /etc/rc";
                exec.stop = "/bin/sh /etc/rc.shutdown";
            }
            EOF
      
            # 3. Start the jail
            echo "Starting i386 jail..."
            sudo jail -f "$JAIL_CONF_FILE" -c "$JAIL_NAME"

            echo "Attempting to ping a public IP (8.8.8.8) from inside the jail..."
            sudo jexec "$JAIL_NAME" sh -c 'ping -c 3 8.8.8.8'
      
            # 4. Prepare Ports inside the 32-bit jail
            echo "Preparing ports inside the i386 jail..."
            # Use jexec to run commands inside the jail
            sudo jexec "$JAIL_NAME" sh -c 'pkg bootstrap -f -y'
            sudo jexec "$JAIL_NAME" sh -c 'pkg install -y git gmake pkgconf perl5 llvm19 flex bison desktop-file-utils gettext-tools gettext ninja gstreamer1-plugins sdl2 gcc13 binutils xorgproto libX11 libXcomposite libXcursor libXext libXi libXinerama libXrandr libXrender'
            # Clone ports only once for all builds
            sudo jexec "$JAIL_NAME" sh -c 'git clone --depth 1 --branch 2025Q4 https://git.freebsd.org/ports.git /usr/ports'
      
            # 5. Build the package inside the jail
            WINE_FLAVOR="${{ github.event.inputs.wine_version || 'wine-stable' }}"
            PORTS_PATH="/usr/ports/emulators/${WINE_FLAVOR}"
            echo "Building $WINE_FLAVOR in i386 jail..."
      
            # All build-time dependencies will be installed as 32-bit by pkg/ports inside the jail.
            BUILD_CMD="cd $PORTS_PATH && make clean && make BATCH=yes DISABLE_LICENSES=yes package"
            sudo jexec "$JAIL_NAME" sh -c "$BUILD_CMD"
      
            # 5. Find, copy, and clean up
            PKG_FILE=$(find "$JAIL_ROOT"/usr/ports/packages/All/ -name "${WINE_FLAVOR}*.pkg" | head -n 1)
            
            # If not found, check for the traditional .txz extension
            if [ -z "$PKG_FILE" ]; then
                PKG_FILE=$(find "$JAIL_ROOT"/usr/ports/packages/All/ -name "${WINE_FLAVOR}*.txz" | head -n 1)
            fi
      
            echo "Successfully built package: $PKG_FILE"
            sudo cp "$PKG_FILE" "${GITHUB_WORKSPACE}/"
      
            # Stop the jail
            sudo jail -r "$JAIL_NAME"
            sudo ifconfig lo1 destroy
  
      - name: Upload Wine Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: freebsd-wine-package
          # Search for any .pkg file copied back to the workspace root
          path: ${{ github.workspace }}/*.pkg
          retention-days: 7
        
